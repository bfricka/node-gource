#!/usr/bin/env node

var q = require('bluebird');
var fs = require('fs');
var cp = require('child_process');
var path = require('path');
var program = require('commander');

var pkg = require('./package.json');
var gourceConfig = handleGourceConfig(path.join(__dirname, 'defaults.gource'));
var numLoops = 0;
var maxLoops = 10;

var REPO_FILE_PATH_REGEX = /\|(\/[\w\d\S]+)$/;
var OPTION_REGEX = /^([\w-]+)\=([\w\d\.]+)$/;

function handleGourceConfig(filePath) {
  return parseGourceConfig(fs.readFileSync(filePath, 'utf8'));
}

function parseGourceConfig(config) {
  var configObj = {};
  var lines = config.split(/[\n\r]+/);

  lines.forEach(function(line) {
    var match = line.match(OPTION_REGEX);

    if (!match) return;

    configObj[match[1]] = match[2];
  });

  return configObj;
}

program
  .version(pkg.version)
  .usage('[options] <file ...>')
  .option('-l --loop', 'Whether to loop gource indefinitely', true)
  .option('-c --config <path>', 'Gource configuration file', handleGourceConfig)
  .option('-m --mashup', 'Whether to create a mashup of the paths provided', false)
  .parse(process.argv);

if (!program.args) program.help();

if (program.config) {
  Object.keys(gourceConfig).forEach(function(opt) {
    var configOption = program.config[opt];
    if (configOption != null) {
      gourceConfig[opt] = configOption;
    }
  });
}

function makeArgs(opts) {
  var args = [];

  Object.keys(opts).forEach(function(opt) {
    var val = opts[opt];

    if (val === 'false') return;

    args.push('--' + opt);
    if (val !== 'true') args.push(val);
  });

  return args.concat(program.mashup ? [__dirname + '/mashup.txt'] : program.args);
}

function loop(idx) {
  var repo = program.args[idx];

  if (!repo) {
    if (numLoops >= maxLoops) {
      return;
    }

    numLoops++;

    return loop(0);
  }

  cp
    .spawn('gource', makeArgs(gourceConfig).concat(repo), { stdio: 'inherit' })
    .on('exit', loop.bind(null, idx + 1));
}

function run() {
  if (program.loop) {
    gourceConfig['--loop'] = 'true';
    if (gourceConfig['stop-at-end']) {
      delete gourceConfig['stop-at-end'];
    }
  }

  maxLoops = 0;
  return loop(0);
}

function getGit(dir) {
  var repo = path.resolve(process.cwd(), dir);
  return cp.spawn('gource', ['--output-custom-log', '-', repo]);
}


function doMashup() {
  var promises = [];

  program.args.forEach(function(repo) {
    var repoName = path.basename(repo);
    var deferred = q.defer();
    var data = '';
    getGit(repo).stdout
      .on('data', function(chunk) {
        data += chunk;
      })
      .on('close', function() {
        deferred.resolve(data);
      });

    promises.push(deferred.promise.then(function(log) {
      return log.split(/[\n\r]+/).map(function(line) {
        return line.replace(REPO_FILE_PATH_REGEX, '|' + '/' + repoName + '$1');
      }).join('\n');
    }));
  });

  return q.all(promises);
}

if (program.mashup) {
  console.log('Building mashup...');

  doMashup().then(function(logs) {
    console.log('Writing Gource mashup file...');
    fs.writeFile(__dirname + '/mashup.txt', logs.join(''), 'utf8', function(err) {
      if (err) {
        console.error("Couldn't write mashup file...", err.message);
        process.exit(1);
      }

      console.log('Mashup file finished. Launching Gource mashup...');
      run();
    });
  });
} else {
  run();
}
